import { useState } from "react";
import Head from "next/head";
import {
  Container,
  Box,
  Flex,
  Heading,
  Menu,
  MenuList,
  MenuItem,
  MenuButton,
  Button,
  Avatar,
  Spinner,
  Text,
  Input,
  IconButton,
} from "@chakra-ui/react";
import { ChevronDownIcon, ChatIcon, EditIcon } from "@chakra-ui/icons";
import { useRouter } from "next/router";
import Cookies from "js-cookie";
import { useMutation } from "@/hooks/useMutation";
import { useQueries } from "@/hooks/useQueries";

export default function Layout({ children, metaTitle, metaDescription }) {
  const router = useRouter();
  const { mutate: mutateLogout } = useMutation();
  const { data: userData } = useQueries({
    prefixUrl: "https://service.pace-unv.cloud/api/user/me",
    headers: {
      Authorization: `Bearer ${Cookies.get("user_token")}`,
    },
  });
  const {
    data: postsData,
    isLoading,
    isError,
  } = useQueries({
    prefixUrl: "https://service.pace-unv.cloud/api/posts?type=all",
    headers: {
      Authorization: `Bearer ${Cookies.get("user_token")}`,
    },
  });

  const [newPost, setNewPost] = useState("");
  const { mutate: createPost } = useMutation();

  const profileUser = userData?.data;
  const posts = postsData?.data;

  const HandleLogout = async () => {
    const response = await mutateLogout({
      url: "https://service.pace-unv.cloud/api/logout",
      method: "GET",
      headers: {
        Authorization: `Bearer ${Cookies.get("user_token")}`,
      },
    });
    if (response?.success) {
      Cookies.remove("user_token");
      router.reload();
    }
  };
  const handleNewPost = async () => {
    const response = await createPost({
      url: "https://service.pace-unv.cloud/api/post",
      method: "POST",
      payload: { description: newPost }, // pass the new post description
      headers: {
        Authorization: `Bearer ${Cookies.get("user_token")}`,
      },
    });

    if (response.success) {
      // Reload to reflect new post
      setNewPost("");
      router.reload();
    }
  };
  const handleLike = async (postId) => {
    const { mutate: likePost } = useMutation();
    await likePost({
      url: `https://service.pace-unv.cloud/api/likes/post/${postId}`,
      method: "POST",
      headers: {
        Authorization: `Bearer ${Cookies.get("user_token")}`,
      },
    });
    router.reload(); // Reload the page to reflect the new like
  };

  return (
    <>
      <Head>
        <title>{`Sanber Daily - ${metaTitle}`}</title>
        <meta
          name="description"
          content={metaDescription || "Generated by Sanber Daily"}
        />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Container width="full" centerContent>
        <Flex
          direction="column"
          bg="whiteAlpha.900"
          width="100vw"
          height="100vh"
        >
          <Box height="5vh">
            <Flex
              height="full"
              alignItems="center"
              justifyContent="space-between"
              padding="2"
              borderBottom="1px"
              borderBottomColor="gray.200"
            >
              <Heading size="md">Sanber Daily</Heading>
              <Menu placement="bottom-end">
                <MenuButton
                  as={Button}
                  size="sm"
                  leftIcon={<Avatar name={profileUser?.name || ""} size="xs" />}
                />
                <MenuList zIndex="2">
                  <MenuItem>Profile ({profileUser?.name || ""})</MenuItem>
                  <MenuItem onClick={HandleLogout}>Logout</MenuItem>
                </MenuList>
              </Menu>
            </Flex>
          </Box>

          <Box height="95vh" overflow="scroll" padding="2" position="relative">
            {/* New Post Section */}
            <Box mb={4} p={4} borderWidth={1} borderRadius="lg">
              <Input
                placeholder="What's happening ..."
                value={newPost}
                onChange={(e) => setNewPost(e.target.value)}
              />
              <Button mt={2} colorScheme="blue" onClick={handleNewPost}>
                Post
              </Button>
            </Box>

            {/* Show loading or error state */}
            {isLoading && <Spinner />}
            {isError && <Text>Error loading posts...</Text>}
            {/* Show posts */}
            {!isLoading && posts && posts.length > 0 ? (
              posts.map((post) => (
                <Box
                  key={post.id}
                  p={4}
                  borderWidth={1}
                  borderRadius="lg"
                  mb={4}
                  bg="gray.50"
                >
                  <Flex justifyContent="space-between" mb={2}>
                    <Flex alignItems="center">
                      <Avatar name={post.user.name} size="sm" />
                      <Box ml={2}>
                        <Text fontWeight="bold">{post.user.name}</Text>
                        <Text fontSize="sm" color="gray.500">
                          {post.user.email} -{" "}
                          {new Date(post.updated_at).toLocaleDateString()}{" "}
                          {post.isEdited && <span>Edited</span>}
                        </Text>
                      </Box>
                    </Flex>
                  </Flex>
                  <Text mb={2}>{post.description}</Text>

                  <Flex justifyContent="space-between">
                    <Flex alignItems="center">
                      <IconButton
                        icon={<ChevronDownIcon />}
                        aria-label="like"
                        variant="ghost"
                        size="sm"
                        mr={2}
                      />
                      <Text>{post.likes} Likes</Text>
                    </Flex>
                    <Flex alignItems="center">
                      <IconButton
                        icon={<ChatIcon />}
                        aria-label="replies"
                        variant="ghost"
                        size="sm"
                        mr={2}
                      />
                      <Text>{post.replies?.length || 0} Replies</Text>{" "}
                      {/* Safe fallback */}
                    </Flex>
                  </Flex>
                </Box>
              ))
            ) : (
              <Text>No posts available.</Text>
            )}
          </Box>
        </Flex>
      </Container>
    </>
  );
}
